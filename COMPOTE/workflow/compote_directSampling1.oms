
val seed = Val[Int]

val tpsExtermination = Val[Int]
val radiusInfestMax = Val[Int]
val ifile_name = Val[String]
val ifile_number = Val[Int]

val infecteTotal = Val[Double]
val infecteVariete1 = Val[Double]
val infecteVariete2 = Val[Double]

val cmds = 
  List(
    "random-seed ${seed}",
    "setup-openmole",
    "go-openmole"
  )

val compoteTask =
  NetLogo6Task(workDirectory / "nlogo/COMPOTE.nlogo", cmds, embedWorkspace= true) set (
    inputs += seed,
    outputs += (seed, tpsExtermination, radiusInfestMax, infecteTotal, ifile_number, ifile_name),
    netLogoInputs += (tpsExtermination, "tpsExtermination"),
    netLogoInputs += (radiusInfestMax, "radiusInfestMax"),
    netLogoInputs += (ifile_name, "i-file_name"),
    netLogoInputs += (ifile_number, "i-file_number"),
    netLogoOutputs += ("pct_infected_tot", infecteTotal),
    netLogoOutputs += ("pct_var1", infecteVariete1),
    netLogoOutputs += ("pct_var2 ", infecteVariete2)
    //ifile_name := "random_rep"
  )

val csvHook = CSVHook(workDirectory / "result/exploration_test.csv", seed, ifile_name, ifile_number, tpsExtermination, radiusInfestMax, infecteTotal,infecteVariete1, infecteVariete2)

/*val exploration = 
  DirectSampling(
    evaluation = Replication(compoteTask hook csvHook, seed, 10),
    sampling = (tpsExtermination in (20 to 300 by 10)) x
    (radiusInfestMax in (1 to 50 by 1)) x
    (i-file_name in List("random_rep","polygon_gem10_rep","polygon_gem100_rep","polygon_gem1000_rep")) x
    (i-file_number in (1 to 30 by 1))
  )
*/

val exploration = 
  DirectSampling(
    evaluation = Replication(compoteTask hook csvHook, seed, 1),
    sampling = (tpsExtermination in (20 to 30 by 10)) x
    (radiusInfestMax in (49 to 50 by 1)) x
    (ifile_name in List("random_rep","polygon_gem10_rep")) x
    (ifile_number in (1 to 2 by 1))
  )
  

exploration
